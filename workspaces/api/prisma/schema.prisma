// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// system models

model SeedHistory {
  id String  @id
  seededAt  DateTime  @default(now())
}

// models

model Developer {
  id  String  @id @default(uuid())
  email  String
  githubUsername  String
  githubId  String
  bio  String?
  name  String?
  avatarURL String
  createdAt DateTime  @default(now())
  connectionList  ConnectionList? @relation(name: "listOwner")
  belongsToConnections Connection[]
  connectionRequests  ConnectionRequest[]
  projects  Project[] @relation(name: "projects")
  ownedProjects Project[] @relation(name: "ownedProjects")
  projectLikes  ProjectLike[]
  sentDirectMessages  DirectMessage[]
  directMessageChat DirectMessageChat[]
  channels ProjectChatChannel[] @relation(name: "channelParticipants")
  channelsAsAdmin ProjectChatChannel[]  @relation(name: "channelAdmins")
  sentProjectMessages  ProjectChatMessage[] @relation(name: "sentProjectMessages")
  seenProjectMessages  ProjectChatMessage[] @relation(name: "seenProjectMessages")
  projectApplications ProjectApplication[]
}

model Tag {
  id  String  @id @default(uuid())
  title String
  createdAt DateTime  @default(now())
  projects  Project[]
}

model Connection {
  id  String  @id @default(uuid())
  developer  Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
  developerId  String
  createdAt DateTime  @default(now())
  connectionList ConnectionList @relation(fields: [connectListId], references: [id], onDelete: Cascade)
  connectListId  String
  chat  DirectMessageChat @relation(fields: [chatId], references: [id])
  chatId  String
}

model ConnectionRequest {
  id  String  @id @default(uuid())
  requesterId  String
  requested Developer @relation(fields: [requestedId], references: [id], onDelete: Cascade)
  requestedId  String
  createdAt DateTime  @default(now())
  resolved  Boolean @default(false)
  resolvedAt DateTime?
  successful  Boolean @default(false)
}

model ConnectionList {
  id  String  @id @default(uuid())
  developer  Developer @relation(fields: [developerId], references: [id], name: "listOwner", onDelete: Cascade)
  developerId  String @unique
  connections Connection[]
}

model Project {
  id  String  @id @default(uuid())
  developers  Developer[] @relation(name: "projects")
  owner  Developer @relation(fields: [ownerId], references: [id], name: "ownedProjects", onDelete: Cascade)
  ownerId String
  createdAt DateTime  @default(now())
  finished  Boolean @default(false)
  finishedAt DateTime?
  title  String
  description String
  tags  Tag[]
  likes ProjectLike[]
  chat  ProjectChat?
  channels ProjectChatChannel[]
  repoURL  String?
  applications  ProjectApplication[]
}

model ProjectLike {
  id  String  @id @default(uuid())
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  developer Developer @relation(fields: [developerId], references: [id], onDelete: Cascade)
  developerId String
  createdAt DateTime  @default(now())
}

model ProjectApplication {
  id  String  @id @default(uuid())
  requesterId  String
  requester Developer @relation(fields: [requesterId], references: [id], onDelete: Cascade)
  projectId String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  resolved  Boolean @default(false)
  resolvedAt DateTime?
  successful  Boolean @default(false)
}

model DirectMessageChat {
  id  String  @id @default(uuid())
  participants  Developer[]
  participantsConnections Connection[]
  messages DirectMessage[]
  createdAt DateTime  @default(now())
}

model DirectMessage {
  id  String  @id @default(uuid())
  sender Developer @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId String
  sentAt  DateTime  @default(now())
  chat  DirectMessageChat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String
  text  String
  seen  Boolean
}

model ProjectChatChannel {
  id  String  @id @default(uuid())
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  participants Developer[]  @relation(name: "channelParticipants")
  admins  Developer[] @relation(name: "channelAdmins")
  messages ProjectChatMessage[]
  chat  ProjectChat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId  String
  createdAt  DateTime  @default(now())
  name String
}

model ProjectChat {
  id  String  @id @default(uuid())
  project Project? @relation(fields: [projectId], references: [id])
  projectId String  @unique
  channels  ProjectChatChannel[]
}

model ProjectChatMessage {
  id  String  @id @default(uuid())
  sender Developer @relation(fields: [senderId], references: [id], onDelete: Cascade, name: "sentProjectMessages")
  senderId String
  sentAt  DateTime  @default(now())
  channel  ProjectChatChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String
  text  String
  seenBy Developer[] @relation(name: "seenProjectMessages")
}